/******************************************************************************************
      ๐ ููุตุฉ ุชุญููู ุงูุฃูุงู ุงูุฌุบุฑุงูู MKT KSA โ ุชุทููุฑ ููุตูุฑ ุจู ุฎุงูุฏ
* ๐ ุฑุฎุตุฉ Apache 2.0 โ ูุณูุญ ุจุงูุงุณุชุฎุฏุงู ูุงูุชุนุฏูู ุจุดุฑุท ุงููุณุจุฉ ูุนุฏู ุชูุฏูู ุถูุงูุงุช.
* MKT KSA Geolocation Security โ Developed by Mansour Bin Khalid (KSA ๐ธ๐ฆ)
* Licensed under Apache 2.0 โ https://www.apache.org/licenses/LICENSE-2.0
* ยฉ 2025 All rights reserved.

    ุงุณู ุงูููู: auth.rs
    ุงููุณุงุฑ: src/api/auth.rs
    ูุธููุฉ ุงูููู:
    ูุฐุง ุงูููู ูุณุคูู ุนู ุฌููุน ููุงุท ุงูููุงูุฉ (Endpoints) ุงููุชุนููุฉ ุจุงููุตุงุฏูุฉ ูุฅุฏุงุฑุฉ ุงููุณุชุฎุฏููู ุนุจุฑ ูุงุฌูุฉ ุจุฑูุฌุฉ ุงูุชุทุจููุงุช (API).
    ูููุฑ ููุทุฉ ููุงูุฉ ูุฌูุจ ุจูุงูุงุช ูุณุชุฎุฏู ูุนูู ุจูุงุกู ุนูู ูุนุฑูู (UUID)ุ ูุน ุชุทุจูู ูุญุต ุงูุตูุงุญูุงุช.
    ูุนุชูุฏ ุนูู ุฎุฏูุฉ UserService ูู ููุทู ุงููุดุฑูุน (core/behavior_bio) ูุฌูุจ ุจูุงูุงุช ุงููุณุชุฎุฏู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช.
    ุญุงููุงูุ ูุง ุชูุฌุฏ ุนูููุงุช ุชุณุฌูู ุฏุฎูู ุฃู ุชุณุฌูู ูุณุชุฎุฏู ุฌุฏูุฏุฉ ูู ูุฐุง ุงููููุ ุจู ูุฑูุฒ ููุท ุนูู ุงุณุชุฑุฌุงุน ุจูุงูุงุช ุงููุณุชุฎุฏู.
    ุงูููู ูุตูู ููููู ุฌุฒุกูุง ูู ุทุจูุฉ API ุงูุชู ุชุชุนุงูู ูุน ุงููุณุชุฎุฏูููุ ููููู ุชูุณูุนู ูุณุชูุจูุงู ููุดูู ุนูููุงุช ุชุณุฌูู ุงูุฏุฎูู ูุงูุชุณุฌูู ูุชุญุฏูุซ ุจูุงูุงุช ุงููุณุชุฎุฏู.

    File name: auth.rs
    Path: src/api/auth.rs

    File purpose:
    This file is responsible for all API endpoints related to authentication and user management.
    It provides an endpoint to fetch a specific user's data by their UUID, with permission checks.
    It relies on the UserService from the core logic (core/behavior_bio) to retrieve user data from the database.
    Currently, there are no login or registration operations in this file; it focuses only on fetching user data.
    The file is designed as part of the API layer that handles user-related operations, and can be extended in the future to include login, registration, and user data updates.
******************************************************************************************/

use actix_web::{get, web, HttpResponse, Responder};
// use sqlx::PgPool; // ุชู ุงูุชุนููู ุจุนุฏ ุงูุชุญููู ุฅูู sea-orm
use uuid::Uuid;

use crate::core::behavior_bio::UserService;

/// ููุทุฉ ููุงูุฉ ูุฌูุจ ุจูุงูุงุช ูุณุชุฎุฏู ูุนูู ุจูุงุกู ุนูู ูุนุฑูู.
/// Endpoint to fetch a specific user's data by their ID.
/// ุชุทุจู ูุญุต ุงูุตูุงุญูุงุช ูุจู ุฅุนุงุฏุฉ ุงูุจูุงูุงุช.
/// Applies permission checks before returning data.
#[get("/users/{id}")]
pub async fn get_user(
    path: web::Path<Uuid>, // ูุนุฑู ุงููุณุชุฎุฏู ุงููุทููุจ (ูู ุงููุณุงุฑ)
                           // Target user ID (from the path)
                           // pool: web::Data<PgPool>,       // ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
                           // Database connection
) -> impl Responder {
    let target_user_id = path.into_inner();

    // ููุงุญุธุฉ: ูู ุงูุชุทุจูู ุงูุญููููุ ูุฌุจ ุงุณุชุฎุฑุงุฌ ูุนุฑู ุงููุณุชุฎุฏู ูู ุชููู ุงููุตุงุฏูุฉ (JWT)
    // Note: In a real application, the user ID should be extracted from the authentication token (JWT)
    let requester_id = target_user_id;

    // ุฅูุดุงุก ุฎุฏูุฉ ุงููุณุชุฎุฏููู ูุน ูุงุนุฏุฉ ุงูุจูุงูุงุช
    // Create the user service with the database connection
    let user_service = UserService::new();

    // ูุญุงููุฉ ุฌูุจ ุจูุงูุงุช ุงููุณุชุฎุฏู ูุน ูุญุต ุงูุตูุงุญูุงุช
    // Try to fetch the user profile data with permission checks
    match user_service
        .get_user_profile_data(requester_id, target_user_id)
        .await
    {
        Ok(user) => HttpResponse::Ok().json(user), // ุฅุนุงุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ
        // Return user data on success
        Err(e) => {
            // ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุจุดูู ุจุณูุท (ููุถู ุชุญุณูููุง ูุณุชูุจูุงู)
            // Basic error handling (should be improved in the future)
            HttpResponse::InternalServerError().body(e.to_string())
        }
    }
}
